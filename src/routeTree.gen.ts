/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ManageIndexImport } from './routes/manage_.index'
import { Route as ManageResetImport } from './routes/manage_.reset'
import { Route as ManageRedirectImport } from './routes/manage_.redirect'
import { Route as ManageLoginImport } from './routes/manage_.login'

// Create/Update Routes

const ManageIndexRoute = ManageIndexImport.update({
  id: '/manage_/',
  path: '/manage/',
  getParentRoute: () => rootRoute,
} as any)

const ManageResetRoute = ManageResetImport.update({
  id: '/manage_/reset',
  path: '/manage/reset',
  getParentRoute: () => rootRoute,
} as any)

const ManageRedirectRoute = ManageRedirectImport.update({
  id: '/manage_/redirect',
  path: '/manage/redirect',
  getParentRoute: () => rootRoute,
} as any)

const ManageLoginRoute = ManageLoginImport.update({
  id: '/manage_/login',
  path: '/manage/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/manage_/login': {
      id: '/manage_/login'
      path: '/manage/login'
      fullPath: '/manage/login'
      preLoaderRoute: typeof ManageLoginImport
      parentRoute: typeof rootRoute
    }
    '/manage_/redirect': {
      id: '/manage_/redirect'
      path: '/manage/redirect'
      fullPath: '/manage/redirect'
      preLoaderRoute: typeof ManageRedirectImport
      parentRoute: typeof rootRoute
    }
    '/manage_/reset': {
      id: '/manage_/reset'
      path: '/manage/reset'
      fullPath: '/manage/reset'
      preLoaderRoute: typeof ManageResetImport
      parentRoute: typeof rootRoute
    }
    '/manage_/': {
      id: '/manage_/'
      path: '/manage'
      fullPath: '/manage'
      preLoaderRoute: typeof ManageIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/manage/login': typeof ManageLoginRoute
  '/manage/redirect': typeof ManageRedirectRoute
  '/manage/reset': typeof ManageResetRoute
  '/manage': typeof ManageIndexRoute
}

export interface FileRoutesByTo {
  '/manage/login': typeof ManageLoginRoute
  '/manage/redirect': typeof ManageRedirectRoute
  '/manage/reset': typeof ManageResetRoute
  '/manage': typeof ManageIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/manage_/login': typeof ManageLoginRoute
  '/manage_/redirect': typeof ManageRedirectRoute
  '/manage_/reset': typeof ManageResetRoute
  '/manage_/': typeof ManageIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/manage/login' | '/manage/redirect' | '/manage/reset' | '/manage'
  fileRoutesByTo: FileRoutesByTo
  to: '/manage/login' | '/manage/redirect' | '/manage/reset' | '/manage'
  id: '__root__' | '/manage_/login' | '/manage_/redirect' | '/manage_/reset' | '/manage_/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ManageLoginRoute: typeof ManageLoginRoute
  ManageRedirectRoute: typeof ManageRedirectRoute
  ManageResetRoute: typeof ManageResetRoute
  ManageIndexRoute: typeof ManageIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  ManageLoginRoute: ManageLoginRoute,
  ManageRedirectRoute: ManageRedirectRoute,
  ManageResetRoute: ManageResetRoute,
  ManageIndexRoute: ManageIndexRoute,
}

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/manage_/login",
        "/manage_/redirect",
        "/manage_/reset",
        "/manage_/"
      ]
    },
    "/manage_/login": {
      "filePath": "manage_.login.tsx"
    },
    "/manage_/redirect": {
      "filePath": "manage_.redirect.tsx"
    },
    "/manage_/reset": {
      "filePath": "manage_.reset.tsx"
    },
    "/manage_/": {
      "filePath": "manage_.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
